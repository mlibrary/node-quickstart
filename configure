#!/bin/sh
# Copyright (c) 2017 The Regents of the University of Michigan.
# All Rights Reserved. Licensed according to the terms of the Revised
# BSD License. See LICENSE.txt for details.
GITHUB="https://github.com/mlibrary"

main() {
  if npm_is_installed; then
    transform_repo

  else
    tell_user_to_install_npm
  fi
}

npm_is_installed() {
  npm version > /dev/null 2>&1
}

transform_repo() {
  collect_inputs
  rewrite_package_json
  rewrite_readme
  run_tests
  commit_changes

  echogood "Everything looks good!"
}

collect_inputs() {
  ask_for_project_name
  ask_for_project_description
  ask_for_author_name

  while ! the_user_likes_the_values; do
    ask_for_project_name
    ask_for_project_description
    ask_for_author_name
  done
}

ask_for_project_name() {
  echo "What will you call this project? For example, if you call it"
  echo "'hello' it will live at $GITHUB/hello/."
  echo "(It's up to you to make sure the name is available.)"
  read_in_project_name

  while project_name_is_invalid; do
    read_in_project_name
  done
}

read_in_project_name() {
  echoask 'project name'
  read project_name
}

project_name_is_invalid() {
  if [ -z "$project_name" ]; then
    echo "Please type in a project name (you left it blank last time):"

  elif project_name_includes_spaces; then
    echo "The project name cannot include spaces. Perhaps you could"
    echo "go with '${project_name//' '/-}' instead of '$project_name'?"

  elif project_name_includes_slashes; then
    echo "The project name cannot include slashes."

  elif project_name_includes_quotes; then
    echo "The project name cannot include quotes. Perhaps you could"
    echo "go with '${project_name//'"'/}' instead of '$project_name'?"

  else
    false
  fi
}

project_name_includes_spaces() {
  echo "$project_name" | grep ' ' > /dev/null
}

project_name_includes_slashes() {
  echo "$project_name" | grep / > /dev/null
}

project_name_includes_quotes() {
  echo "$project_name" | grep \" > /dev/null
}

ask_for_project_description() {
  echo "Please write a short (e.g. 50 characters or so) description:"
  read_in_project_description

  while project_description_is_invalid; do
    read_in_project_description
  done
}

read_in_project_description() {
  echoask 'description'
  read project_description
}

project_description_is_invalid() {
  if [ -z "$project_description" ]; then
    echo "Please type in a description (you left it blank last time):"

  else
    false
  fi
}

ask_for_author_name() {
  echo "What is your name?"
  read_in_author_name

  while author_name_is_invalid; do
    read_in_author_name
  done
}

read_in_author_name() {
  echoask 'author name'
  read author_name
}

author_name_is_invalid() {
  if [ -z "$author_name" ]; then
    echo "Please type in your name (you left it blank last time):"

  else
    false
  fi
}

the_user_likes_the_values() {
  cat <<EOF

[1mDoes this all look right to you?[0m
project name: $project_name
project url:  $GITHUB/$project_name/
description:  $project_description
author:       $author_name

EOF
  ask_yes_or_no
}

ask_yes_or_no() {
  echoask 'yes/no'
  read yes_or_no

  case "${yes_or_no:0:1}" in
    [Yy])
      true
      ;;

    [Nn])
      false
      ;;

    *)
      echo "I didn't understand that. Please enter yes or no."
      ask_yes_or_no
      ;;
  esac
}

rewrite_package_json() {
  echogood "Altering package.json ..."
  if ! sed -e "s/node-quickstart/$project_name/" \
    -e "s/ \"PROJECT_DESCRIPTION\",$/ \"`sanitize_description`\",/" \
    -e "s/ \"YOUR_NAME\",$/ \"`sanitize_author`\",/" \
    package.json > new.json; then
    echobad "Couldn't write new package.json"
    exit 1
  fi

  run_or_exit mv new.json package.json
}

sanitize_description() {
  echo "$project_description" | sed \
    -e 's/\\/\\\\/g' \
    -e 's/"/\\\\"/g' \
    -e 's/\//\\\//g'
}

sanitize_author() {
  echo "$author_name" | sed \
    -e 's/\\/\\\\/g' \
    -e 's/"/\\\\"/g' \
    -e 's/\//\\\//g'
}

rewrite_readme() {
  echogood "Altering README.md ..."
  cat <<EOF > README.md
$project_name
`echo "$project_name" | sed -e 's/./=/g'`

[![Build Status][status-image]][travis]
[![Test Coverage][cover-image]][coverage]

$project_description

[travis]:       https://travis-ci.org/mlibrary/$project_name
[status-image]: https://travis-ci.org/mlibrary/$project_name.svg?branch=master
[coverage]:     https://coveralls.io/github/mlibrary/$project_name
[cover-image]:  https://coveralls.io/repos/github/mlibrary/$project_name/badge.svg?branch=master
EOF
}

run_tests() {
  echogood "Installing node dependencies ..."
  run_or_exit npm install

  echogood "Running linter ..."
  run_or_exit npm run lint

  echogood "Running tests ..."
  run_or_exit npm test
}

commit_changes() {
  echogood "Altering git origin ..."
  run_or_exit git remote set-url origin "git@github.com:mlibrary/${project_name}.git"

  echogood "Committing changes ..."
  run_or_exit git checkout --orphan new-master
  run_or_exit git add package.json README.md
  run_or_exit git rm --force configure
  run_or_exit git commit -m ":zap: Initial commit"
  run_or_exit git branch --delete --force master
  run_or_exit git branch --move master
}

run_or_exit() {
  if ! "$@"; then
    echobad "Command failed: $@"
    exit 1
  fi
}

tell_user_to_install_npm() {
  cat <<EOF >&2
You need to install node first. If you're on a mac, you can run:

    brew install node

If you're on linux, you should use the package manager of your choice to
install node and npm.

If you're on windows, please get in touch with me so that I can help you
set this up. Ideally, I'll learn enough to be able to add windows
support to this quickstart repository.

Once node is installed, just run this script again:

    ./configure
EOF
  exit 1
}

echogood() { echo "[1;32m *[0m $@"; }
echowarn() { echo "[1;33m *[0m $@"; }
echobad()  { echo "[1;31m *[0m $@"; }
echoask()  { /bin/echo -n "[1m$@:[0m "; }

main
